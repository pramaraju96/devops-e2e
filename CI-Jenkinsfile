def artifactname = "artifact_devops_${env.BUILD_NUMBER}.jar"
def repoName = "repository_devops"
def pipelineName = "pipeline_devops"
def semanticVersion = "${env.BUILD_NUMBER}.0.0"
def packageName = "package_devops_${env.BUILD_NUMBER}"
def version = "${env.BUILD_NUMBER}.0"
def changeRequestId = "defaultChangeRequestId"

pipeline {
  agent any
  tools {
       maven 'Maven'
   }
   environment {
	 SCANNER_HOME = tool 'sonarScanner'
	 DOCKER_IMAGE_NAME = "ramadevops.jfrog.io/docker-local/hello-frog:1.0.0"
	}
	
  stages {
       stage('Build') {
           steps {
              sh 'mvn -B -DskipTests clean compile'
           }
       }

       stage('Test') {
           steps {
               sh 'mvn test'
	           sleep(5);
           }
          post {
             always {
                junit "**/target/surefire-reports/*.xml"
             }
           }
       }
       
       stage('Bundle') {
		steps {
                //sonarSummaries()
                sleep(5);
                snDevOpsArtifact(artifactsPayload: """{"artifacts": [{"name": "${artifactname}", "version": "1.${env.BUILD_NUMBER}","semanticVersion": "1.${env.BUILD_NUMBER}.0","repositoryName": "${repoName}"}],"branchName":"main"}""")
                snDevOpsPackage(name: "${packageName}", artifactsPayload: """{"artifacts":[{"name": "${artifactname}", "version": "1.${env.BUILD_NUMBER}","semanticVersion": "1.${env.BUILD_NUMBER}.0","repositoryName": "${repoName}"}], "branchName":"main"}""")
            }       
       }

        stage('Upload to JFrog') {
        steps {
            sleep(5);
            	echo "Uploading the artifacts to JFrog"
		sh 'ls -ltr'
		sh "ls -ltr ${env.WORKSPACE}/target/devops-e2e-1.39.0-SNAPSHOT.jar"
		echo "${env.WORKSPACE}/target/devops-e2e-1.39.0-SNAPSHOT.jar"
            }
	    post{
	    	always{
		    script{
		    def server = Artifactory.server 'ramadevops'
                    def uploadSpec = """{
                    "files": [{
                     "pattern": "${env.WORKSPACE}/target/devops-e2e-1.39.0-SNAPSHOT.jar",
                     "target": "devops-jfrog-repo/"
                    }]
                    }"""

                    def buildInfo = server.upload(uploadSpec) 
                    server.publishBuildInfo buildInfo
		    }
		  }
		}  
        }
             
 }
 
}

def sonarSummaries() {
    withSonarQubeEnv('ramasonarcloud'){
        if(fileExists("sonar-project.properties")) {
            sh '${SCANNER_HOME}/bin/sonar-scanner'
        } else {
            sh '${SCANNER_HOME}/bin/sonar-scanner -Dproject.settings=${SCANNER_HOME}/conf/qa-sonar-scanner.properties'
        }
    }
}
